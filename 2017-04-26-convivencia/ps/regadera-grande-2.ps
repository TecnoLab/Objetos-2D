%!PS-Adobe-3.0
%%Creator: cairo 1.14.6 (http://cairographics.org)
%%CreationDate: Tue Apr 11 11:15:06 2017
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 457x308mm 1296 874 0 () ()
%%BoundingBox: 112 170 867 742
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/pdfmark where { pop globaldict /?pdfmark /exec load put }
    { globaldict begin /?pdfmark /pop load def /pdfmark
    /cleartomark load def end } ifelse
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 457x308mm
%%PageBoundingBox: 112 170 867 742
1296 875 cairo_set_page_size
%%EndPageSetup
q 112 170 755 572 rectclip q
1 0 0 rg
0.8 w
0 J
0 j
[] 0.0 d
4 M q 1 0 0 -1 0 874.204712 cm
432.059 693.582 m 475.133 679.797 513.859 657.223 544.828 623.723 c 579.246
 586.48 595.52 542.023 592.598 490.98 c 590.613 456.34 580.801 423.859 566.371
 392.504 c 558.445 375.305 558.816 375.109 575.594 367.352 c 658.949 328.793
 742.223 290.066 825.711 251.816 c 850.152 240.621 864.543 222.777 865.73
 195.801 c 866.09 187.633 864.496 178.75 861.434 171.152 c 856.441 158.812
 851.418 146.484 846.402 134.152 c 244.918 134.152 l 281.43 205.121 317.801
 276.164 354.516 347.039 c 364.77 366.828 374.91 386.906 387.559 405.152
 c 401.352 425.051 430.844 432.125 453.371 423.215 c 467.215 417.742 480.492
 410.832 494.305 405.258 c 496.984 404.172 503.098 405.246 504.012 407.105
 c 521.477 442.703 534.973 479.273 528.879 520.141 c 525.309 544.098 514.715
 564.727 498.051 581.777 c 470.758 609.703 438.285 629.641 399.949 638.238
 c 362.523 646.633 329.051 636.664 299.367 612.891 c 252.379 575.234 226.324
 524.172 206.988 468.793 c 181.125 394.703 173.035 318.148 174.324 240.121
 c 174.918 204.473 178.051 169.18 183.223 134.148 c 121.699 134.148 l 112.172
 198.031 110.902 262.539 115.953 327.168 c 120.691 387.852 131.922 447.117
 152.715 504.438 c 153.375 506.273 153.301 508.367 153.574 510.34 c 161.828
 528.18 170.078 546.023 178.332 563.871 c 189.625 580.223 200.25 597.09 
212.344 612.828 c 252.363 664.914 302.383 701.055 370.41 703.234 c 390.898
 703.891 412.422 699.871 432.059 693.582 c h
432.059 693.582 m S Q
Q Q
showpage
%%Trailer
%%EOF
