%!PS-Adobe-3.0
%%Creator: cairo 1.14.6 (http://cairographics.org)
%%CreationDate: Fri Jun  9 11:09:43 2017
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%DocumentMedia: 457x308mm 1296 874 0 () ()
%%BoundingBox: 74 71 920 864
%%EndComments
%%BeginProlog
/languagelevel where
{ pop languagelevel } { 1 } ifelse
2 lt { /Helvetica findfont 12 scalefont setfont 50 500 moveto
  (This print job requires a PostScript Language Level 2 printer.) show
  showpage quit } if
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/pdfmark where { pop globaldict /?pdfmark /exec load put }
    { globaldict begin /?pdfmark /pop load def /pdfmark
    /cleartomark load def end } ifelse
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
/cairo_set_page_size {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageMedia: 457x308mm
%%PageBoundingBox: 74 71 920 864
1296 875 cairo_set_page_size
%%EndPageSetup
q 74 71 846 793 rectclip q
1 0 0 rg
2.4 w
1 J
0 j
[] 0.0 d
4 M q 1 0 0 -1 0 874.204712 cm
918.023 799.75 m 462.152 12.609 l 462.152 12.609 m 75.84 679.934 l 145.469
 801.648 l 918.023 799.75 l S Q
0.69282 w
q 0.57735 1 1 -0.57735 0 874.204712 cm
-449.883 368.432 m -442.145 368.433 l -442.143 371.264 l -449.886 371.262
 l h
-449.883 368.432 m S Q
q 0.57735 1 1 -0.57735 0 874.204712 cm
112.718 368.587 m 120.456 368.587 l 120.458 371.418 l 112.716 371.419 l
 h
112.718 368.587 m S Q
q 0.57735 1 1 -0.57735 0 874.204712 cm
-175.011 368.988 m -167.27 368.987 l -167.268 371.818 l -175.01 371.819
 l h
-175.011 368.988 m S Q
0.8 w
q 1 0 0 -1 0 874.204712 cm
188.996 773.785 8.941 3.27 re S Q
q 1 0 0 -1 0 874.204712 cm
838.633 773.965 8.938 3.27 re S Q
q 1 0 0 -1 0 874.204712 cm
506.395 774.426 8.938 3.27 re S Q
2.050273 w
0 J
q 0.999646 0 0 -1 0 874.204712 cm
410.997 625.07 m 411.243 579.711 409.981 567.703 404.964 567.676 c 399.536
 567.645 397.957 577.422 402.564 582.562 c 410.825 591.789 405.155 617.289
 394.854 617.234 c 390.486 617.207 390.255 613.254 394.01 602.668 c 399.333
 587.672 383.561 575.516 373.32 586.723 c 371.151 589.102 368.986 595.508
 368.513 600.965 c 367.513 612.574 361.597 614.5 358.091 604.355 c 354.879
 595.059 358.134 585.395 367.251 577.16 c 374.535 570.582 374.953 569.402
 372.413 562.57 c 368.572 552.215 376.027 524.137 390.763 493.469 c 403.967
 465.992 410.102 458.551 419.516 458.605 c 423.228 458.625 426.913 456.969
 427.71 454.93 c 428.554 452.758 432.282 451.23 436.678 451.258 c 445.361
 451.305 446.169 448.887 439.511 442.793 c 436.92 440.422 433.462 435.207
 431.832 431.203 c 430.015 426.746 427.022 423.914 424.119 423.898 c 409.7
 423.82 360.209 384.613 360.276 373.316 c 360.303 367.695 361.253 367.773
 399.954 376.477 c 421.813 381.395 424.736 381.281 424.767 375.523 c 424.795
 370.32 434.888 364.422 443.684 364.469 c 447.99 364.492 452.91 362.848 
454.618 360.809 c 456.329 358.773 460.21 357.117 463.246 357.137 c 466.282
 357.152 472.292 355.43 476.606 353.305 c 483.741 349.797 485.16 349.805
 492.256 353.395 c 496.547 355.562 501.873 357.348 504.088 357.359 c 506.304
 357.371 510.747 359.25 513.967 361.531 c 517.187 363.812 523.005 365.945
 526.893 366.273 c 535.689 367.016 546.342 373.852 546.318 378.734 c 546.291
 383.359 551.508 383.371 580.604 378.816 c 612.869 373.766 615.671 376.484
 596.469 394.223 c 582.569 407.066 554.501 424.043 543.7 426.145 c 539.535
 426.953 536.119 429.113 536.108 430.938 c 536.096 432.77 532.72 438.059
 528.601 442.699 c 524.478 447.34 521.106 451.824 521.102 452.668 c 521.098
 453.512 525.002 454.223 529.777 454.25 c 534.552 454.277 538.456 455.285
 538.448 456.5 c 538.44 457.711 542.227 459.438 546.861 460.332 c 557.017
 462.297 557.502 462.863 570.389 487.918 c 583.198 512.805 595.464 559.133
 590.115 562.398 c 585.379 565.289 587.286 570.836 596.078 579.723 c 602.948
 586.668 604.702 590.395 604.659 597.98 c 604.608 607.523 598.997 618.594
 595.836 615.395 c 594.91 614.461 594.175 609.723 594.202 604.867 c 594.257
 594.863 586.805 583.559 580.135 583.52 c 577.716 583.508 573.668 585.758
 571.132 588.527 c 567.138 592.895 566.853 595.18 568.982 605.879 c 571.19
 616.965 570.995 618.199 567.044 618.176 c 561.253 618.145 554.981 608.801
 555.028 600.277 c 555.048 596.535 556.92 589.641 559.186 584.957 c 563.297
 576.457 562.609 568.539 557.76 568.512 c 556.353 568.504 555.188 570.664
 555.173 573.312 c 555.161 575.961 554.028 578.812 552.66 579.648 c 551.156
 580.566 550.077 598.266 549.933 624.434 c 549.698 667.695 l 517.511 667.52
 l 485.332 667.344 l 484.835 631.992 l 484.425 602.523 483.722 596.633 480.619
 596.617 c 477.517 596.598 476.751 602.484 476.016 631.941 c 475.133 667.285
 l 410.766 666.934 l h
410.997 625.07 m S Q
Q Q
showpage
%%Trailer
%%EOF
